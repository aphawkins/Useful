static Useful.Security.Cryptography.EnigmaRotors.RotorPositions.get -> System.Collections.Generic.IEnumerable<Useful.Security.Cryptography.EnigmaRotorPosition>!
static Useful.Security.Cryptography.EnigmaRotors.RotorSet.get -> System.Collections.Generic.IList<Useful.Security.Cryptography.EnigmaRotorNumber>!
Useful.IRepository<T>
Useful.IRepository<T>.Create(T item) -> void
Useful.IRepository<T>.CurrentItem.get -> T?
Useful.IRepository<T>.Delete(T item) -> void
Useful.IRepository<T>.Read() -> System.Collections.Generic.IEnumerable<T>!
Useful.IRepository<T>.SetCurrentItem(System.Func<T, bool>! match) -> void
Useful.IRepository<T>.Update(T item) -> void
Useful.Security.Cryptography.Atbash
Useful.Security.Cryptography.Atbash.Atbash() -> void
Useful.Security.Cryptography.Atbash.CipherName.get -> string!
Useful.Security.Cryptography.Atbash.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.Atbash.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.Atbash.GenerateSettings() -> void
Useful.Security.Cryptography.Caesar
Useful.Security.Cryptography.Caesar.Caesar(Useful.Security.Cryptography.ICaesarSettings! settings) -> void
Useful.Security.Cryptography.Caesar.CipherName.get -> string!
Useful.Security.Cryptography.Caesar.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.Caesar.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.Caesar.GenerateSettings() -> void
Useful.Security.Cryptography.Caesar.Settings.get -> Useful.Security.Cryptography.ICaesarSettings!
Useful.Security.Cryptography.Caesar.Settings.set -> void
Useful.Security.Cryptography.CaesarSettings
Useful.Security.Cryptography.CaesarSettings.CaesarSettings() -> void
Useful.Security.Cryptography.CaesarSettings.RightShift.get -> int
Useful.Security.Cryptography.CaesarSettings.RightShift.set -> void
Useful.Security.Cryptography.CipherRepository
Useful.Security.Cryptography.CipherRepository.CipherRepository() -> void
Useful.Security.Cryptography.CipherRepository.Create(Useful.Security.Cryptography.ICipher! cipher) -> void
Useful.Security.Cryptography.CipherRepository.CurrentItem.get -> Useful.Security.Cryptography.ICipher?
Useful.Security.Cryptography.CipherRepository.CurrentItem.set -> void
Useful.Security.Cryptography.CipherRepository.Delete(Useful.Security.Cryptography.ICipher! cipher) -> void
Useful.Security.Cryptography.CipherRepository.Read() -> System.Collections.Generic.IEnumerable<Useful.Security.Cryptography.ICipher!>!
Useful.Security.Cryptography.CipherRepository.SetCurrentItem(System.Func<Useful.Security.Cryptography.ICipher!, bool>! match) -> void
Useful.Security.Cryptography.CipherRepository.Update(Useful.Security.Cryptography.ICipher! cipher) -> void
Useful.Security.Cryptography.Enigma
Useful.Security.Cryptography.Enigma.CipherName.get -> string!
Useful.Security.Cryptography.Enigma.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.Enigma.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.Enigma.Enigma(Useful.Security.Cryptography.IEnigmaSettings! settings) -> void
Useful.Security.Cryptography.Enigma.GenerateSettings() -> void
Useful.Security.Cryptography.Enigma.Settings.get -> Useful.Security.Cryptography.IEnigmaSettings!
Useful.Security.Cryptography.Enigma.Settings.set -> void
Useful.Security.Cryptography.EnigmaPlugboard
Useful.Security.Cryptography.EnigmaPlugboard.EnigmaPlugboard() -> void
Useful.Security.Cryptography.EnigmaPlugboard.EnigmaPlugboard(System.Collections.Generic.IList<Useful.Security.Cryptography.EnigmaPlugboardPair!>! pairs) -> void
Useful.Security.Cryptography.EnigmaPlugboard.SubstitutionCount.get -> int
Useful.Security.Cryptography.EnigmaPlugboard.Substitutions() -> System.Collections.Generic.IReadOnlyDictionary<char, char>!
Useful.Security.Cryptography.EnigmaPlugboard.this[char letter].get -> char
Useful.Security.Cryptography.EnigmaPlugboardPair
Useful.Security.Cryptography.EnigmaPlugboardPair.From.get -> char
Useful.Security.Cryptography.EnigmaPlugboardPair.From.set -> void
Useful.Security.Cryptography.EnigmaPlugboardPair.To.get -> char
Useful.Security.Cryptography.EnigmaPlugboardPair.To.set -> void
Useful.Security.Cryptography.EnigmaReflector
Useful.Security.Cryptography.EnigmaReflector.EnigmaReflector() -> void
Useful.Security.Cryptography.EnigmaReflector.Reflect(char letter) -> char
Useful.Security.Cryptography.EnigmaReflector.ReflectorNumber.get -> Useful.Security.Cryptography.EnigmaReflectorNumber
Useful.Security.Cryptography.EnigmaReflector.ReflectorNumber.init -> void
Useful.Security.Cryptography.EnigmaReflectorNumber
Useful.Security.Cryptography.EnigmaReflectorNumber.B = 0 -> Useful.Security.Cryptography.EnigmaReflectorNumber
Useful.Security.Cryptography.EnigmaReflectorNumber.C = 1 -> Useful.Security.Cryptography.EnigmaReflectorNumber
Useful.Security.Cryptography.EnigmaRotor
Useful.Security.Cryptography.EnigmaRotor.Backward(char letter) -> char
Useful.Security.Cryptography.EnigmaRotor.CurrentSetting.get -> char
Useful.Security.Cryptography.EnigmaRotor.CurrentSetting.set -> void
Useful.Security.Cryptography.EnigmaRotor.EnigmaRotor() -> void
Useful.Security.Cryptography.EnigmaRotor.Forward(char letter) -> char
Useful.Security.Cryptography.EnigmaRotor.Notches.get -> string!
Useful.Security.Cryptography.EnigmaRotor.RingPosition.get -> int
Useful.Security.Cryptography.EnigmaRotor.RingPosition.set -> void
Useful.Security.Cryptography.EnigmaRotor.RotorNumber.get -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotor.RotorNumber.init -> void
Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.Beta = 9 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.Gamma = 10 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.I = 1 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.II = 2 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.III = 3 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.IV = 4 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.V = 5 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.VI = 6 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.VII = 7 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorNumber.VIII = 8 -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.EnigmaRotorPosition
Useful.Security.Cryptography.EnigmaRotorPosition.Fastest = 0 -> Useful.Security.Cryptography.EnigmaRotorPosition
Useful.Security.Cryptography.EnigmaRotorPosition.Second = 1 -> Useful.Security.Cryptography.EnigmaRotorPosition
Useful.Security.Cryptography.EnigmaRotorPosition.Third = 2 -> Useful.Security.Cryptography.EnigmaRotorPosition
Useful.Security.Cryptography.EnigmaRotors
Useful.Security.Cryptography.EnigmaRotors.AdvanceRotors() -> void
Useful.Security.Cryptography.EnigmaRotors.EnigmaRotors() -> void
Useful.Security.Cryptography.EnigmaRotors.EnigmaRotors(System.Collections.Generic.IReadOnlyDictionary<Useful.Security.Cryptography.EnigmaRotorPosition, Useful.Security.Cryptography.IEnigmaRotor!>! rotors) -> void
Useful.Security.Cryptography.EnigmaRotors.Rotors.get -> System.Collections.Generic.IReadOnlyDictionary<Useful.Security.Cryptography.EnigmaRotorPosition, Useful.Security.Cryptography.IEnigmaRotor!>!
Useful.Security.Cryptography.EnigmaRotors.Rotors.init -> void
Useful.Security.Cryptography.EnigmaRotors.this[Useful.Security.Cryptography.EnigmaRotorPosition position].get -> Useful.Security.Cryptography.IEnigmaRotor!
Useful.Security.Cryptography.EnigmaSettings
Useful.Security.Cryptography.EnigmaSettings.EnigmaSettings() -> void
Useful.Security.Cryptography.EnigmaSettings.Plugboard.get -> Useful.Security.Cryptography.IEnigmaPlugboard!
Useful.Security.Cryptography.EnigmaSettings.Plugboard.init -> void
Useful.Security.Cryptography.EnigmaSettings.Reflector.get -> Useful.Security.Cryptography.IEnigmaReflector!
Useful.Security.Cryptography.EnigmaSettings.Reflector.init -> void
Useful.Security.Cryptography.EnigmaSettings.Rotors.get -> Useful.Security.Cryptography.IEnigmaRotors!
Useful.Security.Cryptography.EnigmaSettings.Rotors.init -> void
Useful.Security.Cryptography.ICaesarSettings
Useful.Security.Cryptography.ICaesarSettings.RightShift.get -> int
Useful.Security.Cryptography.ICaesarSettings.RightShift.set -> void
Useful.Security.Cryptography.ICipher
Useful.Security.Cryptography.ICipher.CipherName.get -> string!
Useful.Security.Cryptography.ICipher.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.ICipher.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.ICipher.GenerateSettings() -> void
Useful.Security.Cryptography.IEnigmaPlugboard
Useful.Security.Cryptography.IEnigmaPlugboard.SubstitutionCount.get -> int
Useful.Security.Cryptography.IEnigmaPlugboard.Substitutions() -> System.Collections.Generic.IReadOnlyDictionary<char, char>!
Useful.Security.Cryptography.IEnigmaPlugboard.this[char letter].get -> char
Useful.Security.Cryptography.IEnigmaReflector
Useful.Security.Cryptography.IEnigmaReflector.Reflect(char letter) -> char
Useful.Security.Cryptography.IEnigmaReflector.ReflectorNumber.get -> Useful.Security.Cryptography.EnigmaReflectorNumber
Useful.Security.Cryptography.IEnigmaRotor
Useful.Security.Cryptography.IEnigmaRotor.Backward(char letter) -> char
Useful.Security.Cryptography.IEnigmaRotor.CurrentSetting.get -> char
Useful.Security.Cryptography.IEnigmaRotor.CurrentSetting.set -> void
Useful.Security.Cryptography.IEnigmaRotor.Forward(char letter) -> char
Useful.Security.Cryptography.IEnigmaRotor.Notches.get -> string!
Useful.Security.Cryptography.IEnigmaRotor.RingPosition.get -> int
Useful.Security.Cryptography.IEnigmaRotor.RingPosition.set -> void
Useful.Security.Cryptography.IEnigmaRotor.RotorNumber.get -> Useful.Security.Cryptography.EnigmaRotorNumber
Useful.Security.Cryptography.IEnigmaRotors
Useful.Security.Cryptography.IEnigmaRotors.AdvanceRotors() -> void
Useful.Security.Cryptography.IEnigmaRotors.Rotors.get -> System.Collections.Generic.IReadOnlyDictionary<Useful.Security.Cryptography.EnigmaRotorPosition, Useful.Security.Cryptography.IEnigmaRotor!>!
Useful.Security.Cryptography.IEnigmaRotors.Rotors.init -> void
Useful.Security.Cryptography.IEnigmaRotors.this[Useful.Security.Cryptography.EnigmaRotorPosition position].get -> Useful.Security.Cryptography.IEnigmaRotor!
Useful.Security.Cryptography.IEnigmaSettings
Useful.Security.Cryptography.IEnigmaSettings.Plugboard.get -> Useful.Security.Cryptography.IEnigmaPlugboard!
Useful.Security.Cryptography.IEnigmaSettings.Reflector.get -> Useful.Security.Cryptography.IEnigmaReflector!
Useful.Security.Cryptography.IEnigmaSettings.Rotors.get -> Useful.Security.Cryptography.IEnigmaRotors!
Useful.Security.Cryptography.IMonoAlphabeticSettings
Useful.Security.Cryptography.IMonoAlphabeticSettings.CharacterSet.get -> string!
Useful.Security.Cryptography.IMonoAlphabeticSettings.Reverse(char letter) -> char
Useful.Security.Cryptography.IMonoAlphabeticSettings.SubstitutionCount.get -> int
Useful.Security.Cryptography.IMonoAlphabeticSettings.Substitutions.get -> string!
Useful.Security.Cryptography.IMonoAlphabeticSettings.this[char substitution].get -> char
Useful.Security.Cryptography.IMonoAlphabeticSettings.this[char substitution].set -> void
Useful.Security.Cryptography.IReflectorSettings
Useful.Security.Cryptography.IReflectorSettings.CharacterSet.get -> string!
Useful.Security.Cryptography.IReflectorSettings.Reflect(char letter) -> char
Useful.Security.Cryptography.IReflectorSettings.SubstitutionCount.get -> int
Useful.Security.Cryptography.IReflectorSettings.Substitutions.get -> string!
Useful.Security.Cryptography.IReflectorSettings.this[char substitution].get -> char
Useful.Security.Cryptography.IReflectorSettings.this[char substitution].set -> void
Useful.Security.Cryptography.MonoAlphabetic
Useful.Security.Cryptography.MonoAlphabetic.CipherName.get -> string!
Useful.Security.Cryptography.MonoAlphabetic.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.MonoAlphabetic.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.MonoAlphabetic.GenerateSettings() -> void
Useful.Security.Cryptography.MonoAlphabetic.MonoAlphabetic(Useful.Security.Cryptography.IMonoAlphabeticSettings! settings) -> void
Useful.Security.Cryptography.MonoAlphabetic.Settings.get -> Useful.Security.Cryptography.IMonoAlphabeticSettings!
Useful.Security.Cryptography.MonoAlphabetic.Settings.set -> void
Useful.Security.Cryptography.MonoAlphabeticSettings
Useful.Security.Cryptography.MonoAlphabeticSettings.CharacterSet.get -> string!
Useful.Security.Cryptography.MonoAlphabeticSettings.CharacterSet.init -> void
Useful.Security.Cryptography.MonoAlphabeticSettings.MonoAlphabeticSettings() -> void
Useful.Security.Cryptography.MonoAlphabeticSettings.Reverse(char letter) -> char
Useful.Security.Cryptography.MonoAlphabeticSettings.SubstitutionCount.get -> int
Useful.Security.Cryptography.MonoAlphabeticSettings.Substitutions.get -> string!
Useful.Security.Cryptography.MonoAlphabeticSettings.Substitutions.set -> void
Useful.Security.Cryptography.MonoAlphabeticSettings.this[char substitution].get -> char
Useful.Security.Cryptography.MonoAlphabeticSettings.this[char substitution].set -> void
Useful.Security.Cryptography.Reflector.GenerateSettings() -> void
Useful.Security.Cryptography.ReflectorSettings.CharacterSet.init -> void
Useful.Security.Cryptography.ReflectorSettings.ReflectorSettings() -> void
Useful.Security.Cryptography.ReflectorSettings.Substitutions.set -> void
Useful.Security.Cryptography.ROT13
Useful.Security.Cryptography.ROT13.CipherName.get -> string!
Useful.Security.Cryptography.ROT13.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.ROT13.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.ROT13.GenerateSettings() -> void
Useful.Security.Cryptography.ROT13.ROT13() -> void
Useful.Security.Cryptography.Reflector
Useful.Security.Cryptography.Reflector.CipherName.get -> string!
Useful.Security.Cryptography.Reflector.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.Reflector.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.Reflector.Reflector(Useful.Security.Cryptography.IReflectorSettings! settings) -> void
Useful.Security.Cryptography.Reflector.Settings.get -> Useful.Security.Cryptography.IReflectorSettings!
Useful.Security.Cryptography.Reflector.Settings.set -> void
Useful.Security.Cryptography.ReflectorSettings
Useful.Security.Cryptography.ReflectorSettings.CharacterSet.get -> string!
Useful.Security.Cryptography.ReflectorSettings.Reflect(char letter) -> char
Useful.Security.Cryptography.ReflectorSettings.SubstitutionCount.get -> int
Useful.Security.Cryptography.ReflectorSettings.Substitutions.get -> string!
Useful.Security.Cryptography.ReflectorSettings.this[char substitution].get -> char
Useful.Security.Cryptography.ReflectorSettings.this[char substitution].set -> void
override Useful.Security.Cryptography.Atbash.ToString() -> string!
override Useful.Security.Cryptography.Caesar.ToString() -> string!
override Useful.Security.Cryptography.Enigma.ToString() -> string!
override Useful.Security.Cryptography.MonoAlphabetic.ToString() -> string!
override Useful.Security.Cryptography.ROT13.ToString() -> string!
override Useful.Security.Cryptography.Reflector.ToString() -> string!
