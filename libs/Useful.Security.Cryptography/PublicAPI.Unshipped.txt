Useful.IRepository<T>
Useful.IRepository<T>.Create(T item) -> void
Useful.IRepository<T>.CurrentItem.get -> T?
Useful.IRepository<T>.Delete(T item) -> void
Useful.IRepository<T>.Read() -> System.Collections.Generic.IEnumerable<T>!
Useful.IRepository<T>.SetCurrentItem(System.Func<T, bool>! match) -> void
Useful.IRepository<T>.Update(T item) -> void
Useful.Security.Cryptography.Atbash
Useful.Security.Cryptography.Atbash.Atbash() -> void
Useful.Security.Cryptography.Atbash.CipherName.get -> string!
Useful.Security.Cryptography.Atbash.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.Atbash.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.AtbashSymmetric
Useful.Security.Cryptography.AtbashSymmetric.AtbashSymmetric() -> void
Useful.Security.Cryptography.Caesar
Useful.Security.Cryptography.Caesar.Caesar() -> void
Useful.Security.Cryptography.Caesar.Caesar(Useful.Security.Cryptography.ICaesarSettings! settings) -> void
Useful.Security.Cryptography.Caesar.CipherName.get -> string!
Useful.Security.Cryptography.Caesar.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.Caesar.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.Caesar.Settings.get -> Useful.Security.Cryptography.ICaesarSettings!
Useful.Security.Cryptography.Caesar.Settings.set -> void
Useful.Security.Cryptography.CaesarSettings
Useful.Security.Cryptography.CaesarSettings.CaesarSettings() -> void
Useful.Security.Cryptography.CaesarSettings.CaesarSettings(int rightShift) -> void
Useful.Security.Cryptography.CaesarSettings.RightShift.get -> int
Useful.Security.Cryptography.CaesarSettings.RightShift.set -> void
Useful.Security.Cryptography.CaesarSymmetric
Useful.Security.Cryptography.CaesarSymmetric.CaesarSymmetric() -> void
Useful.Security.Cryptography.CaesarSymmetric.CaesarSymmetric(Useful.Security.Cryptography.ICaesarSettings! settings) -> void
Useful.Security.Cryptography.CipherMethods
Useful.Security.Cryptography.CipherRepository
Useful.Security.Cryptography.CipherRepository.CipherRepository() -> void
Useful.Security.Cryptography.CipherRepository.Create(Useful.Security.Cryptography.ICipher! cipher) -> void
Useful.Security.Cryptography.CipherRepository.CurrentItem.get -> Useful.Security.Cryptography.ICipher?
Useful.Security.Cryptography.CipherRepository.CurrentItem.set -> void
Useful.Security.Cryptography.CipherRepository.Delete(Useful.Security.Cryptography.ICipher! cipher) -> void
Useful.Security.Cryptography.CipherRepository.Read() -> System.Collections.Generic.IEnumerable<Useful.Security.Cryptography.ICipher!>!
Useful.Security.Cryptography.CipherRepository.SetCurrentItem(System.Func<Useful.Security.Cryptography.ICipher!, bool>! match) -> void
Useful.Security.Cryptography.CipherRepository.Update(Useful.Security.Cryptography.ICipher! cipher) -> void
Useful.Security.Cryptography.CipherTransformMode
Useful.Security.Cryptography.CipherTransformMode.Decrypt = 1 -> Useful.Security.Cryptography.CipherTransformMode
Useful.Security.Cryptography.CipherTransformMode.Encrypt = 0 -> Useful.Security.Cryptography.CipherTransformMode
Useful.Security.Cryptography.ICaesarSettings
Useful.Security.Cryptography.ICaesarSettings.RightShift.get -> int
Useful.Security.Cryptography.ICaesarSettings.RightShift.set -> void
Useful.Security.Cryptography.ICipher
Useful.Security.Cryptography.ICipher.CipherName.get -> string!
Useful.Security.Cryptography.ICipher.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.ICipher.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.IKeyGenerator
Useful.Security.Cryptography.IKeyGenerator.RandomIv() -> byte[]!
Useful.Security.Cryptography.IKeyGenerator.RandomKey() -> byte[]!
Useful.Security.Cryptography.ROT13
Useful.Security.Cryptography.ROT13.CipherName.get -> string!
Useful.Security.Cryptography.ROT13.Decrypt(string! ciphertext) -> string!
Useful.Security.Cryptography.ROT13.Encrypt(string! plaintext) -> string!
Useful.Security.Cryptography.ROT13.ROT13() -> void
Useful.Security.Cryptography.ROT13Symmetric
Useful.Security.Cryptography.ROT13Symmetric.ROT13Symmetric() -> void
override Useful.Security.Cryptography.Atbash.ToString() -> string!
override Useful.Security.Cryptography.AtbashSymmetric.CreateDecryptor(byte[]! rgbKey, byte[]? rgbIV) -> System.Security.Cryptography.ICryptoTransform!
override Useful.Security.Cryptography.AtbashSymmetric.CreateEncryptor(byte[]! rgbKey, byte[]? rgbIV) -> System.Security.Cryptography.ICryptoTransform!
override Useful.Security.Cryptography.AtbashSymmetric.GenerateIV() -> void
override Useful.Security.Cryptography.AtbashSymmetric.GenerateKey() -> void
override Useful.Security.Cryptography.AtbashSymmetric.IV.get -> byte[]!
override Useful.Security.Cryptography.AtbashSymmetric.IV.set -> void
override Useful.Security.Cryptography.AtbashSymmetric.Key.get -> byte[]!
override Useful.Security.Cryptography.AtbashSymmetric.Key.set -> void
override Useful.Security.Cryptography.AtbashSymmetric.ToString() -> string!
override Useful.Security.Cryptography.Caesar.ToString() -> string!
override Useful.Security.Cryptography.CaesarSymmetric.CreateDecryptor(byte[]! rgbKey, byte[]? rgbIV) -> System.Security.Cryptography.ICryptoTransform!
override Useful.Security.Cryptography.CaesarSymmetric.CreateEncryptor(byte[]! rgbKey, byte[]? rgbIV) -> System.Security.Cryptography.ICryptoTransform!
override Useful.Security.Cryptography.CaesarSymmetric.GenerateIV() -> void
override Useful.Security.Cryptography.CaesarSymmetric.GenerateKey() -> void
override Useful.Security.Cryptography.CaesarSymmetric.IV.get -> byte[]!
override Useful.Security.Cryptography.CaesarSymmetric.IV.set -> void
override Useful.Security.Cryptography.CaesarSymmetric.Key.get -> byte[]!
override Useful.Security.Cryptography.CaesarSymmetric.Key.set -> void
override Useful.Security.Cryptography.CaesarSymmetric.ToString() -> string!
override Useful.Security.Cryptography.ROT13.ToString() -> string!
override Useful.Security.Cryptography.ROT13Symmetric.CreateDecryptor(byte[]! rgbKey, byte[]? rgbIV) -> System.Security.Cryptography.ICryptoTransform!
override Useful.Security.Cryptography.ROT13Symmetric.CreateEncryptor(byte[]! rgbKey, byte[]? rgbIV) -> System.Security.Cryptography.ICryptoTransform!
override Useful.Security.Cryptography.ROT13Symmetric.GenerateIV() -> void
override Useful.Security.Cryptography.ROT13Symmetric.GenerateKey() -> void
override Useful.Security.Cryptography.ROT13Symmetric.IV.get -> byte[]!
override Useful.Security.Cryptography.ROT13Symmetric.IV.set -> void
override Useful.Security.Cryptography.ROT13Symmetric.Key.get -> byte[]!
override Useful.Security.Cryptography.ROT13Symmetric.Key.set -> void
override Useful.Security.Cryptography.ROT13Symmetric.ToString() -> string!
static Useful.Security.Cryptography.CipherMethods.SymmetricTransform(System.Security.Cryptography.SymmetricAlgorithm! cipher, Useful.Security.Cryptography.CipherTransformMode transformMode, System.IO.Stream! input, System.IO.Stream! output) -> void
static Useful.Security.Cryptography.CipherMethods.SymmetricTransform(System.Security.Cryptography.SymmetricAlgorithm! cipher, Useful.Security.Cryptography.CipherTransformMode transformMode, string! input) -> string!
